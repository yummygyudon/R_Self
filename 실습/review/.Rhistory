leaflet() %>% addTiles() %>% setView(lng = home_lonlat$lon, lat = home_lonlat$lat, zoom = 15) %>%
addCircleMarkers(lng = lon, lat = lat, color='#ff3399', popup = msg, size=2 )
leaflet() %>% addTiles() %>% setView(lng = home_lonlat$lon, lat = home_lonlat$lat, zoom = 15) %>%
addCircleMarkers(lng = lon, lat = lat, color='#ff3399', popup = msg, radius = runif(50,50,150) )
leaflet() %>% addTiles() %>% setView(lng = home_lonlat$lon, lat = home_lonlat$lat, zoom = 15) %>%
addCircleMarkers(lng = lon, lat = lat, color='#ff3399', popup = msg, radius = runif(5,5,10) )
leaflet() %>% addTiles() %>% setView(lng = home_lonlat$lon, lat = home_lonlat$lat, zoom = 15) %>%
addCircleMarkers(lng = lon, lat = lat, color='#ff3399', popup = msg, radius = runif(2,2,5) )
leaflet() %>% addTiles() %>% setView(lng = home_lonlat$lon, lat = home_lonlat$lat, zoom = 15) %>%
addCircleMarkers(lng = lon, lat = lat, color='red', popup = msg, radius = runif(2,2,5) )
leaflet() %>% addTiles() %>% setView(lng = home_lonlat$lon, lat = home_lonlat$lat, zoom = 15) %>%
addCircleMarkers(lng = lon, lat = lat, color='red', popup = msg, radius = runif(2.5,2.5,6) )
home <- leaflet() %>% addTiles() %>% setView(lng = home_lonlat$lon, lat = home_lonlat$lat, zoom = 15) %>%
addCircleMarkers(lng = lon, lat = lat, color='red', popup = msg, radius = runif(2.5,2.5,6) )
saveWidget(home, file='lab19.html')
library(ggplot2)
iris
wd.Sepal <- iris$Sepal.Width
wd.Sepal
hist(wd.Sepal)
View(iris)
hist(iris$Sepal.Width, labels = iris$Sepal.Width )
hist(iris$Sepal.Width, main = "꽃받침 너비 Histogram" )
boxplot(iris$Sepal.Width)
summary(iris$Sepal.Width)
s.Sep_wd <- summary(iris$Sepal.Width)
s.Sep_wd[4]
s.Sep_wd[5]
s.Sep_wd["Mean"]
s.Sep_wd["Mean"][1]
s.Sep_wd[[5]][1]
s.Sep_wd$Mean
m.Sep_wd <- mean(iris$Sepal.Width)
m.Sep_wd
cat("평균 : ",s.Sep_wd, "\n표준편차 : ", sd.Sep_wd,"\n3분위수 : ",quan.Sep_wd)
m.Sep_wd <- mean(iris$Sepal.Width)
quan.Sep_wd <- s.Sep_wd[[5]][1]
sd.Sep_wd <- sd(iris$Petal.Width)
cat("평균 : ",s.Sep_wd, "\n표준편차 : ", sd.Sep_wd,"\n3분위수 : ",quan.Sep_wd)
cat("평균 : ",m.Sep_wd, "\n표준편차 : ", sd.Sep_wd,"\n3분위수 : ",quan.Sep_wd)
bar_x <- barplot(iris$Sepal.Width)
bar_x <- hist(iris$Sepal.Width)
hist(iris$Sepal.Width, main = "꽃받침 너비 Histogram", xlab=NULL, ylab=NULL )
hist(iris$Sepal.Width, main = "꽃받침 너비 Histogram", xlab=NULL, ylab=NULL ) +
text(labels = iris$Sepal.Width, pos = 3)
hist(iris$Sepal.Width, main = "꽃받침 너비 Histogram", xlab=NULL, ylab=NULL ) +
text(x=bar_x, labels = iris$Sepal.Width, pos = 3)
boxplot(iris$Sepal.Width, iris$Species)
table(iris)
table(iris$Species)
iris[which(Species=="setosa")]
iris[which(iris$Species=="setosa")]
colnames(table(iris$Species))
factor(iris$Species)
species <- factor(iris$Species)
boxplot(iris$Sepal.Width~species )
iris$Sepal.Width[iris$Species=="setosa"]
s <- iris$Sepal.Width[iris$Species=="setosa"]
s
s <- data.frame(s)
s
colnames(s) <- "setosa"
colnames(v) <- "versicolor"
v <- iris$Sepal.Width[iris$Species=="versicolor"]
v <- data.frame(v)
colnames(v) <- "versicolor"
s ; v
shapiro.test(s)
s <- iris$Sepal.Width[iris$Species=="setosa"]
s <- data.frame(as.double(s))
colnames(s) <- "setosa"
v <- iris$Sepal.Width[iris$Species=="versicolor"]
v <- data.frame(as.double(v))
colnames(v) <- "versicolor"
s ; v
shapiro.test(s)
cbind(s,v)
df <- cbind(s,v)
str(df)
shapiro.test(v)
t.test(data=df,s~v)
t.test(data=df,setosa~versicolor)
s <- subset(iris$Sepal.Width, iris$Species == "setosa")
v <- subset(iris$Sepal.Width, iris$Species == "versicolor")
?t.test
t.test(s,v)
shapiro.test(s)
shapiro.test(b)
shapiro.test(v)
t.test(s,v)
test <- iris[,c(1,2,3,4)]
test
str(test)
cor(test)
cor_test <- cor(test)
max(cor_test)
plot(cor_test)
library(corrplot)
corrplot(cor_test)
corrplot(cor_test, method="pie", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(cor_test, method="number", type="lower", order="hclust", tl.srt=45, diag=F)
a <- c(1,2,3,4,5)
a[2:4]
# 문제2
library(leaflet)
library(dplyr)
library(ggmap)
aggregate(iris$Sepal.Width, by=list(iris$Species),summary)
aggregate(iris$Sepal.Width, by=list(iris$Species),range)
boxplot(data=iris,Sepal.Width~species )
boxplot(data=iris,Sepal.Width~Species )
w <- read.csv("data/data4.csv")
w
# 단순선형 회귀분석 실시
# lm() : 단순선형 회귀분석
w_lm <- lm(weight ~ egg_weight, data = w_n)
w_lm
str(w_lm)
plot(w_n$egg_weight, w_n$weight)  # 산점도 그리기
lines(w_n$egg_weight, w_lm$fitted.values, col = "blue")  # 회귀직선 추가
text(x = 66, y = 132, label = 'Y = 2.3371X - 14.5475')  # 회귀직선 라벨로 표시
names(w_lm)  # w_lm 변수에 어떤 항목들이 있는지 확인
w_lm$coefficients
w_lm$fitted.values
hist(w_lm$residuals, col = "skyblue", xlab = "residuals",
main = "병아리 무게 잔차 히스토그램")
w_mlm <- lm(weight ~ egg_weight + movement + food, data = w_n)
w_mlm
## 다중회귀분석에서 변수 선택 방법
## 전진선택법 : <y 절편만 있는 상수>부터 시작해서 독립 변수들을 추가해 나가는 방법
## 후진소거법 : <독립 변수를 모두 포함한 상태>에서 가장 적은 영향을 주는 변수를 하나씩 제거해 나감
# (참고)후진소거법을 적용해 자동으로 실행
# step()
step_mlm <- step(w_mlm, direction = "backward")
library(MASS)
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
data(states)
library(car)
library(car)
install.packages("leaps")
library(leaps)
states.regsubsets <- regsubsets(x=Murder ~ Population + Illiteracy + Income + Frost, data=states, nbest=4)
states.regsubsets
library(MASS)
states.regsubsets <- regsubsets(x=Murder ~ Population + Illiteracy + Income + Frost, data=states, nbest=4)
states <- data.frame(state.x77[, c("Murder", "Population", "Illiteracy", "Income", "Frost")])
## 다중회귀분석에서 변수 선택 방법
## 전진선택법 : <y 절편만 있는 상수>부터 시작해서 독립 변수들을 추가해 나가는 방법
## 후진소거법 : <독립 변수를 모두 포함한 상태>에서 가장 적은 영향을 주는 변수를 하나씩 제거해 나감
# (참고)후진소거법을 적용해 자동으로 실행
# step() : direction 인수 : foward(전진선택)_데이터가 많을 때 불리 / backward(후진소거) / both
# [[AIC 값]]은 "적을수록" 바람직한 모델
step_mlm <- step(w_mlm, direction = "backward")
# (참고)회귀분석 결과 그래프로 확인
r <- par(mfrow=c(2,2))
plot(w_mlm2)
par(r)
# 다중회귀분석 실시
w_mlm <- lm(weight ~ egg_weight + movement + food, data = w_n)
# p값이 높은 movement 변수를 제외한 열만 다시 회귀분석 실시
w_mlm2 <- lm(weight ~ egg_weight + food, data = w_n)
# 분산팽창요인(Variation Inflation Factor, VIF)
# 정해져 있는 기준은 없지만 4~10이상이면 문제있다고 보고, 30보다 크면 심각하다고 판단
vif(w_mlm2)
## 잔차 히스토그램 : 단순 선영 회귀분석에서처럼 산점도를 그려서 회귀모델이 얼마나 적합한지
## 봐야하지만 다중 회귀 분석은 독립변수가 많으므로 최소 3차원 이상의 축을 가진
## 그래프를 그려야 함  --> 잔차 히스토그램만 확인
hist(w_mlm2$residuals, col = "skyblue", xlab = "residuals",
main = "병아리 무게 잔차 히스토그램(다중 회귀)")
## 다중회귀분석에서 변수 선택 방법
## 전진선택법 : <y 절편만 있는 상수>부터 시작해서 독립 변수들을 추가해 나가는 방법
## 후진소거법 : <독립 변수를 모두 포함한 상태>에서 가장 적은 영향을 주는 변수를 하나씩 제거해 나감
# (참고)후진소거법을 적용해 자동으로 실행
# step() : direction 인수 : foward(전진선택)_데이터가 많을 때 불리 / backward(후진소거) / both
# [[AIC 값]]은 "적을수록" 바람직한 모델
step_mlm <- step(w_mlm, direction = "backward")
# (참고)회귀분석 결과 그래프로 확인
r <- par(mfrow=c(2,2))
plot(w_mlm2)
## 비선형 회귀분석(다항 회귀분석)
## 독립변수와 종속변수가 선형관계가 아닌 비선형 관계일 때 사용하는 분석 방법
## 독립변수와 종속변수 관계가 곡선 형태일 때
## 독립변수에 "로그"나 "거듭 제곱" 등을 취해 보면서 적합한 비선형 모델을 찾는다.
# 비선형 회귀분석용 두번째 데이터셋 불러오기
w2 <- read.csv("data/data5.csv", header = TRUE)
head(w2)
str(w2)
plot(w2)  # 데이터 형태 산점도로 확인
par(mfrow=c(1,1))
plot(w2)  # 데이터 형태 산점도로 확인
# 성장기간에 따른 병아리 무게 변화 선형 회귀분석 실시
w2_lm <- lm(weight ~ day, data = w2)
summary(w2_lm)
# 산점도 위에 회귀직선 표시
lines(w2$day, w2_lm$fitted.values, col = "blue")
# 성장기간에 따른 병아리 무게 변화 비선형 회귀분석 실시
# 제곱으로
w2_lm2 <- lm(weight ~ I(day^3) + I(day^2) + day, data = w2)
summary(w2_lm2)
plot(w2)
# 산점도 위에 회귀곡선 표시
lines(w2$day, w2_lm2$fitted.values, col = "red")
# w2_lm2 회귀분석 결과에서 계수 확인
w2_lm2$coefficients
# 산점도 위에 수식 표시
text(25, 3000, "weight = -0.025*day^3 + 2.624*day^2 - 15.298*day + 117.014")
out <- lm(dist ~ speed, data=cars)
influencePlot(out, main="Influence Plot", sub="Circle size is proportional
to Cook's distance")
# 잔차의 독립성 (independence of errors)
library(car)
durbinWatsonTest(out)
setwd("C:\Users\duck9\OneDrive\바탕 화면\R(Doit_Self)\실습\review")
setwd("C:/Users/duck9/OneDrive/바탕 화면/R(Doit_Self)/실습/review")
length(letters)
letters[1]
exam1 <- function(){
Alpha <- NULL
for (i in 1: length(letters)){
Alpha <- append(Alpha,paste0(LETTERS[i],letters[i])
}
return(Alpha)
}
exam1 <- function(){
for (i in 1: length(letters)){
Alpha <- append(Alpha,paste0(LETTERS[i],letters[i])
}
}
exam1 <- function(){
return(paste0(LETTERS,letters))
}
exam1()
exam1 <- function(){
return(paste0(LETTERS,letters))
}
exam1()
exam2 <- function(num){
return(sum(1:num))
}
exam2(10)
cat("함수 호출 결과 : ",exam2(10))
exam3 <- function(num1, num2){
return(abs(num1-num2))
}
print("함수 호출 결과 :",function(10,18))
print("함수 호출 결과 :",exam3(10,18))
exam3(10,18)
print(paste("함수 호출 결과 :",exam3(10,18)))
exam4 <- function(n1,op,n2){
if(op %in% c("+", "-", "*", "%/%", "%%")){
if(op == "%/%" || op == "%%"){
if(n1 == 0){
return("오류1")
}else if(n2 == 0){
return("오류2")
}else{
return(switch(EXPR = op, "%/%" = n%/%m, "%%" = m%%m))
}
}else{
return(switch(EXPR = op, "+" = n+m,"-" = n-m,"*" = n*m)) # SWITCH()함수의 중요성
}
}else{
return("규격의 연산자만 전달하세요")
}
}
exam4(10,"+",5)
exam4 <- function(n1,op,n2){
if(op %in% c("+", "-", "*", "%/%", "%%")){
if(op == "%/%" || op == "%%"){
if(n1 == 0){
return("오류1")
}else if(n2 == 0){
return("오류2")
}else{
return(switch(EXPR = op, "%/%" = n1%/%n2, "%%" = n1%%n2))
}
}else{
return(switch(EXPR = op, "+" = n1+n2,"-" = n1-n2,"*" = n1*n2)) # SWITCH()함수의 중요성
}
}else{
return("규격의 연산자만 전달하세요")
}
}
exam4(10,"+",5)
exam4(10,"%%",5)
exam4(10,"%/%",5)
exam4(10,"*",5)
exam4(10,"-",5)
exam5 <- function(n, char="#"){
if (n>0){
for (i in 1:n){
cat(char,sep = '')
}
}
return()
}
exam5(0)
exam5 <- function(rep, char = "#"){
if(m>0){
for(i in m){
cat(char)
}
}
return()
}
exam5(0)
exam5 <- function(rep, char = "#"){
if(rep>0){
for(i in rep){
cat(char)
}
}
return()
}
exam5(0)
exam5(3,"%")
exam5 <- function(rep, char = "#"){
if(rep>0){
for(i in 1:rep){
cat(char)
}
}
return()
}
exam5(0)
exam5(3,"%")
exam5 <- function(rep, char = "#"){
if(rep>0){
for(i in 1:rep){
cat(char,sep = " ")
}
}
return()
}
exam5(0)
exam5(3,"%")
exam6 <- function(scores){
for (score in scores){
if (is.na(score)){
cat("NA는 처리불가\n")
}else if (score >=85){
cat(score, "점은 상등급입니다.\n")
}else if (score >=70){
cat(score, "점은 중등급입니다.\n")
}else{
cat(score, "점은 하등급입니다.\n")
}
}
return()
}
exam6(c(90, 100, 61, 84, 94, 70))
exam4(0,"%%",0)
exam4(5,"%%",0)
exam4(10,"$",5)
countEvenOdd <- function(v){
if(is.vector(v)){
even <- 0
odd <- 0
for (i in v){
if (i %% 2 == 0){
cat(i," : even\n");
even <- count_even+1;
}else{
cat(i," : odd\n");
odd <- count_odd+1;
}
return(list(even, odd))
}
}else{
return()
}
}
countEvenOdd(1,2)
a<-c(1,2)
countEvenOdd(a)
#문제 1
countEvenOdd <- function(v){
if(is.vector(v)){
even <- 0
odd <- 0
for (i in v){
if (i %% 2 == 0){
cat(i," : even\n");
even <- even+1;
}else{
cat(i," : odd\n");
odd <- odd+1;
}
return(list(even, odd))
}
}else{
return()
}
}
a<-c(1,2)
countEvenOdd(a)
#문제 1
countEvenOdd <- function(v){
if(is.vector(v)){
v<- c(v)
even <- 0
odd <- 0
for (i in v){
if (i %% 2 == 0){
cat(i," : even\n");
even <- even+1;
}else{
cat(i," : odd\n");
odd <- odd+1;
}
return(list(even, odd))
}
}else{
return()
}
}
a<-c(1,2)
countEvenOdd(a)
#문제 1
countEvenOdd <- function(v){
if(is.vector(...)){
v <- c(...)
even <- 0
odd <- 0
for (i in v){
if (i %% 2 == 0){
cat(i," : even\n");
even <- even+1;
}else{
cat(i," : odd\n");
odd <- odd+1;
}
return(list(even, odd))
}
}else{
return()
}
}
a<-c(1,2)
countEvenOdd(a)
countEvenOdd <- function(...){
v <- c(...)
if(is.vector(v)){
even <- 0
odd <- 0
for (i in v){
if (i %% 2 == 0){
cat(i," : even\n");
even <- even+1;
}else{
cat(i," : odd\n");
odd <- odd+1;
}
return(list(even, odd))
}
}else{
return()
}
}
a<-c(1,2)
countEvenOdd(a)
countEvenOdd(1,2,3,5,6)
#문제 1
countEvenOdd <- function(...){
v <- c(...)
if(is.vector(v)){
even <- 0
odd <- 0
for (i in v){
if (i %% 2 == 0){
cat(i," : even\n");
even <- even+1;
}else{
cat(i," : odd\n");
odd <- odd+1;
}
return(list(even, odd))
}
}else{
return()
}
}
countEvenOdd(1,2,3,5,6)
countEvenOdd()
#문제 1
countEvenOdd <- function(...){
v <- c(...)
if(is.vector(v)){
even <- 0
odd <- 0
for (i in v){
if (i %% 2 == 0){
cat(i," : even\n");
even <- even+1;
}else{
cat(i," : odd\n");
odd <- odd+1;
}
}
return(list(even, odd))
}else{
return()
}
}
countEvenOdd()
countEvenOdd(1,3,5,6,7,8)
list(1,2,3,4)
ls <- list(1,2,3,4)
countEvenOdd(ls)
data <- "가나다"
print(data)
print(data, quote=FALSE)
